/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

buildscript {
    ext.minecraft_version = "1.16.5-R0.1-SNAPSHOT"
    ext.guice_version = "5.0.1"
    ext.multiverse_deps = [
      [name: "Core", version: "4.2.2"],
      [name: "NetherPortals", version: "4.2.1"]
    ]
    ext.snakeyaml_version = "1.28"
    ext.shadow_version = "5.2.0"
    dependencies {
      classpath "org.yaml:snakeyaml:$snakeyaml_version"
    }
}

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version "$shadow_version"
}

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
      url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
      url = "https://repo.onarandombox.com/content/groups/public/"
    }
}

configurations  {
    runtimeClasspath.extendsFrom(implementation)
}

dependencies {
    // Use JUnit test framework.
    // testImplementation 'junit:junit:4.13'

    compileOnly "org.spigotmc:spigot-api:$minecraft_version"
    api "com.google.inject:guice:$guice_version"
    multiverse_deps.each {
      compileOnly "com.onarandombox.multiverse${it.name.toLowerCase()}:Multiverse-${it.name}:${it.version}"
    }


}

def plugin_yml = new org.yaml.snakeyaml.Yaml().load(
  new File( project.name + "/src/main/resources/plugin.yml").newInputStream()
)
version = "v" + plugin_yml.version + '-SNAPSHOT'
group 'com.jeansburger.hardcore'


task createClassPathFile {
  doLast {
    def classPathFile = new File(".classpath").newWriter()
    def classPath = ""
    configurations.compileClasspath.each {
      String jarPath = it.getAbsolutePath() + ':'
      classPath = classPath + jarPath
    }
    classPath = classPath.substring(0, classPath.length() - 1)
    classPathFile.withWriter { w ->
      w << classPath
    }
  }
}

shadowJar {
    archiveClassifier.set('')
    minimize()
}

tasks.build.dependsOn tasks.shadowJar
defaultTasks 'shadowJar'

build.finalizedBy(createClassPathFile)
